{"version":3,"sources":["../js/helper.ts","../js/parser.ts","../js/main.js"],"names":["card_badges","t","options","card","get","then","Parser","getBadgesFromName","show_settings","opts","boardBar","url","args","rand","Math","random","toFixed","height","board_buttons","icon","callback","open_board_bar","console","log","TrelloPowerUp","initialize","name"],"mappings":";AAQa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARA,QAAA,SAAW,SAAC,EAAG,GACtB,OAAA,GAAK,EACA,QAEL,EAAI,EACC,WADL,GAIO,QAAA,eAAiB,SAAC,GACzB,IAAA,EAEA,IACF,EAAQ,WAAW,GACnB,MAAO,GACP,EAAQ,KAGH,OAAA;;ACgDT,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjEA,IAAA,EAAA,QAAA,YAGM,EAAoB,SAAC,GACrB,IAAA,EAAS,GAET,EAAQ,EACT,MAAM,UACN,IAAI,EAAA,gBACJ,OAAO,SAAC,GAAM,OAAA,IAEb,EAAW,EACZ,MAAM,UACN,IAAI,EAAA,gBACJ,OAAO,SAAC,GAAM,OAAA,IAEb,EAAU,EAAS,OAEnB,EAAS,OAAS,EAAM,SAC1B,EAAU,EAAM,QAEb,IAAA,IAAI,EAAI,EAAS,OAAS,EAAG,GAAK,EAAG,IACxC,QAAQ,IAAI,iBAAkB,WAAY,EAAS,IAGhD,IAAA,IAAI,EAAI,EAAM,OAAS,EAAG,GAAK,EAAG,IACrC,QAAQ,IAAI,iBAAkB,QAAS,EAAM,IAG1C,IAAA,IAAI,EAAI,EAAU,EAAG,GAAK,EAAG,IAAK,CACjC,IAAA,EAAe,EAAS,GACxB,EAAY,EAAM,GAClB,EAAQ,EAAA,SAAS,EAAc,GAC/B,EAAO,GAEP,IACF,GAAQ,GAEN,GAAgB,IAClB,GAAQ,KAEN,IACF,GAAQ,GAEV,QAAQ,IAAI,iBAAkB,EAAG,IAAK,EAAS,EAAO,SAAU,GAEhE,EAAO,KAAK,CACV,QAAS,EAAqB,KAAK,KAAM,EAAM,KAM5C,OAFP,QAAQ,IAAI,iBAAkB,qBAAsB,GAE7C,EAEE,SAAA,EAAqB,EAAM,GAC3B,MAAA,CACL,KAAM,EAEN,MAAO,EACP,QAAS,KAKf,QAAA,QAAe,CACb,kBAAiB;;AClEnB,aAEA,IAAA,EAAA,EAAA,QAAA,aA0CA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAjCA,SAASA,EAAYC,EAAGC,GACfD,OAAAA,EAAEE,KAAK,QACXC,IAAI,QACJC,KAAKC,EAAOC,QAAAA,mBAGjB,SAASC,EAAcP,EAAGQ,GACjBR,OAAAA,EAAES,SAAS,CAChBC,IAAK,mBACLC,KAAM,CAGJC,MAAuB,IAAhBC,KAAKC,UAAgBC,QAAQ,IAEtCC,OAAQ,MAIZ,SAASC,EAAcjB,EAAGC,GACjB,MAAA,CAAC,CACNiB,KAAU,oBACVC,SAAUC,IAId,SAASA,EAAepB,EAAGC,GAGlBM,OAFPc,QAAQC,IAAI,iBAAkB,sBAEvBf,EAAcP,EAAGC,GAnC1BsB,cAAcC,WAAW,CACDzB,qBAAAA,EACAkB,gBAAAA,EACAV,gBAAAA,EACAR,cAAAA,IAkCxB,IAAI0B,EAAO,gCAEXpB,EAAOC,QAAAA,kBAAkBmB","file":"main.0e847e74.js","sourceRoot":"../src/html","sourcesContent":["export const getColor = (a, b) => {\n  if (a <= b)\n    return 'green';\n\n  if (b < a)\n    return 'red';\n}\n\nexport const parseFloatSafe = (str) => {\n  var float;\n\n  try {\n    float = parseFloat(str);\n  } catch (e) {\n    float = null;\n  }\n\n  return float;\n}\n","import { parseFloatSafe, getColor } from './helper';\n\n\nconst getBadgesFromName = (cardName) => {\n  var badges = [];\n\n  var total = cardName\n    .split(/[\\(\\)]/)\n    .map(parseFloatSafe)\n    .filter((o) => o);\n\n  var consumed = cardName\n    .split(/[\\[\\]]/)\n    .map(parseFloatSafe)\n    .filter((o) => o);\n\n  var longest = consumed.length;\n\n  if (consumed.length < total.length)\n    longest = total.length;\n\n  for (var j = consumed.length - 1; j >= 0; j--) {\n    console.log('[time-tracker]', 'consumed', consumed[j]);\n  }\n\n  for (var k = total.length - 1; k >= 0; k--) {\n    console.log('[time-tracker]', 'total', total[k]);\n  }\n\n  for (var i = longest - 1; i >= 0; i--) {\n    var consumedTime = consumed[i];\n    var totalTime = total[i];\n    var color = getColor(consumedTime, totalTime);\n    var text = '';\n\n    if (consumedTime)\n      text += consumedTime;\n\n    if (consumedTime && totalTime)\n      text += '/';\n\n    if (totalTime)\n      text += totalTime;\n\n    console.log('[time-tracker]', i, '/', longest, color, 'badge:', text);\n\n    badges.push({\n      dynamic: getTimeTrackingBadge.bind(null, text, color),\n    });\n  }\n\n  console.log('[time-tracker]', 'will return badges', badges);\n\n  return badges;\n\n  function getTimeTrackingBadge(text, color){\n    return {\n      text: text,\n      // icon: './images/logo.png',\n      color: color,\n      refresh: 4 // in seconds\n    };\n  }\n}\n\nexport default {\n  getBadgesFromName,\n}","'use strict';\n\nimport Parser from './parser';\n\nTrelloPowerUp.initialize({\n  'card-detail-badges': card_badges,\n  'board-buttons'     : board_buttons,\n  'show-settings'     : show_settings,\n  'card-badges'       : card_badges,\n});\n\nfunction card_badges(t, options) {\n  return t.card('name')\n    .get('name')\n    .then(Parser.getBadgesFromName);\n}\n\nfunction show_settings(t, opts) {\n  return t.boardBar({\n    url: './board-bar.html',\n    args: {\n      // optional arguments to pass to the page\n      // accessed on that page with t.arg('rand')\n      rand: (Math.random() * 100).toFixed(0)\n    },\n    height: 200 // initial height in pixels, can be changed later\n  });\n}\n\nfunction board_buttons(t, options){\n  return [{\n    icon    : './images/logo.png',\n    callback: open_board_bar,\n  }];\n}\n\nfunction open_board_bar(t, options){\n  console.log('[time-tracker]', 'Opening board bar.');\n\n  return show_settings(t, options);\n}\n\nvar name = 'A test card [3] [33] (44) (4)';\n\nParser.getBadgesFromName(name);\n"]}