{"version":3,"sources":["../js/main.js"],"names":["card_badges","t","options","card","get","then","extractTimes","show_settings","opts","boardBar","url","args","rand","Math","random","toFixed","height","board_buttons","icon","callback","open_board_bar","console","log","TrelloPowerUp","initialize","name","cardName","badges","total","split","map","parseFloatSafe","filter","o","consumed","longest","length","j","k","i","consumedTime","totalTime","color","getColor","text","push","dynamic","getTimeTrackingBadge","bind","refresh","a","b","str","float","parseFloat","e"],"mappings":";AAAA,aASA,SAASA,EAAYC,EAAGC,GACfD,OAAAA,EAAEE,KAAK,QACXC,IAAI,QACJC,KAAKC,GAGV,SAASC,EAAcN,EAAGO,GACjBP,OAAAA,EAAEQ,SAAS,CAChBC,IAAK,mBACLC,KAAM,CAGJC,MAAuB,IAAhBC,KAAKC,UAAgBC,QAAQ,IAEtCC,OAAQ,MAIZ,SAASC,EAAchB,EAAGC,GACjB,MAAA,CAAC,CACNgB,KAAU,oBACVC,SAAUC,IAId,SAASA,EAAenB,EAAGC,GAGlBK,OAFPc,QAAQC,IAAI,iBAAkB,sBAEvBf,EAAcN,EAAGC,GAnC1BqB,cAAcC,WAAW,CACDxB,qBAAAA,EACAiB,gBAAAA,EACAV,gBAAAA,EACAP,cAAAA,IAkCxB,IAAIyB,EAAO,gCAIX,SAASnB,EAAaoB,GAChBC,IAAAA,EAAS,GAITC,EAAQF,EACTG,MAAM,UACNC,IAAIC,GACJC,OAAO,SAACC,GAAMA,OAAAA,IAEbC,EAAWR,EACZG,MAAM,UACNC,IAAIC,GACJC,OAAO,SAACC,GAAMA,OAAAA,IAEbE,EAAUD,EAASE,OAEnBF,EAASE,OAASR,EAAMQ,SAC1BD,EAAUP,EAAMQ,QAEb,IAAA,IAAIC,EAAIH,EAASE,OAAS,EAAGC,GAAK,EAAGA,IACxChB,QAAQC,IAAI,iBAAkB,WAAYY,EAASG,IAGhD,IAAA,IAAIC,EAAIV,EAAMQ,OAAS,EAAGE,GAAK,EAAGA,IACrCjB,QAAQC,IAAI,iBAAkB,QAASM,EAAMU,IAG1C,IAAA,IAAIC,EAAIJ,EAAU,EAAGI,GAAK,EAAGA,IAAK,CACjCC,IAAAA,EAAeN,EAASK,GACxBE,EAAYb,EAAMW,GAClBG,EAAQC,EAASH,EAAcC,GAC/BG,EAAO,GAEPJ,IACFI,GAAQJ,GAENA,GAAgBC,IAClBG,GAAQ,KAENH,IACFG,GAAQH,GAEVpB,QAAQC,IAAI,iBAAkBiB,EAAG,IAAKJ,EAASO,EAAO,SAAUE,GAEhEjB,EAAOkB,KAAK,CACVC,QAASC,EAAqBC,KAAK,KAAMJ,EAAMF,KAM5Cf,OAFPN,QAAQC,IAAI,iBAAkB,qBAAsBK,GAE7CA,EAEEoB,SAAAA,EAAqBH,EAAMF,GAC3B,MAAA,CACLE,KAAMA,EAENF,MAAOA,EACPO,QAAS,GAIJN,SAAAA,EAASO,EAAGC,GACfD,OAAAA,GAAKC,EACA,QAELA,EAAID,EACC,WADLC,EAIGpB,SAAAA,EAAeqB,GAClBC,IAAAA,EAEA,IACFA,EAAQC,WAAWF,GACnB,MAAOG,GACPF,EAAQ,KAGHA,OAAAA,GAlFX/C,EAAamB","file":"main.f07b8831.js","sourceRoot":"../src/html","sourcesContent":["'use strict';\n\nTrelloPowerUp.initialize({\n  'card-detail-badges': card_badges,\n  'board-buttons'     : board_buttons,\n  'show-settings'     : show_settings,\n  'card-badges'       : card_badges,\n});\n\nfunction card_badges(t, options) {\n  return t.card('name')\n    .get('name')\n    .then(extractTimes);\n}\n\nfunction show_settings(t, opts) {\n  return t.boardBar({\n    url: './board-bar.html',\n    args: {\n      // optional arguments to pass to the page\n      // accessed on that page with t.arg('rand')\n      rand: (Math.random() * 100).toFixed(0)\n    },\n    height: 200 // initial height in pixels, can be changed later\n  });\n}\n\nfunction board_buttons(t, options){\n  return [{\n    icon    : './images/logo.png',\n    callback: open_board_bar,\n  }];\n}\n\nfunction open_board_bar(t, options){\n  console.log('[time-tracker]', 'Opening board bar.');\n\n  return show_settings(t, options);\n}\n\nvar name = 'A test card [3] [33] (44) (4)';\n\nextractTimes(name);\n\nfunction extractTimes(cardName){\n  var badges = [];\n  var match;\n\n\n  var total = cardName\n    .split(/[\\(\\)]/)\n    .map(parseFloatSafe)\n    .filter((o) => o);\n\n  var consumed = cardName\n    .split(/[\\[\\]]/)\n    .map(parseFloatSafe)\n    .filter((o) => o);\n\n  var longest = consumed.length;\n\n  if (consumed.length < total.length)\n    longest = total.length;\n\n  for (var j = consumed.length - 1; j >= 0; j--) {\n    console.log('[time-tracker]', 'consumed', consumed[j]);\n  }\n\n  for (var k = total.length - 1; k >= 0; k--) {\n    console.log('[time-tracker]', 'total', total[k]);\n  }\n\n  for (var i = longest - 1; i >= 0; i--) {\n    var consumedTime = consumed[i];\n    var totalTime = total[i];\n    var color = getColor(consumedTime, totalTime);\n    var text = '';\n\n    if (consumedTime)\n      text += consumedTime;\n\n    if (consumedTime && totalTime)\n      text += '/';\n\n    if (totalTime)\n      text += totalTime;\n\n    console.log('[time-tracker]', i, '/', longest, color, 'badge:', text);\n\n    badges.push({\n      dynamic: getTimeTrackingBadge.bind(null, text, color),\n    });\n  }\n\n  console.log('[time-tracker]', 'will return badges', badges);\n\n  return badges;\n\n  function getTimeTrackingBadge(text, color){\n    return {\n      text: text,\n      // icon: './images/logo.png',\n      color: color,\n      refresh: 4 // in seconds\n    };\n  }\n\n  function getColor(a, b) {\n    if (a <= b)\n      return 'green';\n\n    if (b < a)\n      return 'red';\n  }\n\n  function parseFloatSafe(str) {\n    var float;\n\n    try {\n      float = parseFloat(str);\n    } catch (e) {\n      float = null;\n    }\n\n    return float;\n  }\n\n  function identity(o) {\n    return o;\n  }\n}\n"]}